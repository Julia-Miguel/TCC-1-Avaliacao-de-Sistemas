// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TipoUsuario {
  ADMIN_EMPRESA
  CLIENTE_PLATAFORMA
  CLIENTE_AVALIACAO
}

model Empresa {
  id               Int        @id @default(autoincrement())
  nome             String     @unique
  emailResponsavel String     @unique
  senhaEmpresa     String
  usuarios         Usuario[]
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@map("empresas")
}

model Usuario {
  id                   Int            @id @default(autoincrement())
  nome                 String?
  email                String         @unique
  senha                String?
  tipo                 TipoUsuario @default(CLIENTE_AVALIACAO)
  empresaId            Int?
  empresa              Empresa?       @relation(fields: [empresaId], references: [id])
  questionariosCriados Questionario[] @relation("CriadorQuestionario")
  avaliacoesCriadas    Avaliacao[]    @relation("CriadorAvaliacao")
  usuAval              UsuAval[]
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt

  @@map("usuarios")
}

model Questionario {
  id           Int         @id @default(autoincrement())
  titulo       String
  criadorId    Int
  criador      Usuario     @relation("CriadorQuestionario", fields: [criadorId], references: [id])
  ordem        Int         @default(0)
  perguntas    QuePerg[]
  avaliacoes   Avaliacao[]
  eh_satisfacao Boolean     @default(false)
  ativo         Boolean     @default(true)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@map("questionarios")
}

model Avaliacao {
  id                 Int          @id @default(autoincrement())
  semestre           String
  requerLoginCliente Boolean      @default(false)
  questionarioId     Int
  token              String     @unique @default(uuid())
  questionario       Questionario @relation(fields: [questionarioId], references: [id], onDelete: Cascade)
  criadorId          Int
  criador            Usuario      @relation("CriadorAvaliacao", fields: [criadorId], references: [id])
  usuarios           UsuAval[]
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  
  @@map("avaliacao")
}

model UsuAval {
  id                 Int      @id @default(autoincrement())
  avaliacaoId        Int
  avaliacao          Avaliacao @relation(fields: [avaliacaoId], references: [id], onDelete: Cascade)
  usuarioId          Int?
  usuario            Usuario?  @relation(fields: [usuarioId], references: [id])
  anonymousSessionId String?
  status             String
  isFinalizado       Boolean   @default(false)
  started_at         DateTime?
  finished_at        DateTime?
  respostas          Resposta[]
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  @@unique([avaliacaoId, usuarioId])
  @@unique([avaliacaoId, anonymousSessionId])
  @@map("usu_aval")
}

enum TipoPergunta {
  TEXTO
  MULTIPLA_ESCOLHA
}

model Opcao {
  id         Int      @id @default(autoincrement())
  texto      String
  pergunta   Pergunta @relation(fields: [perguntaId], references: [id], onDelete: Cascade)
  perguntaId Int

  @@map("opcoes")
}

model Pergunta {
  id            Int        @id @default(autoincrement())
  enunciado     String
  tipos         String
  obrigatoria   Boolean    @default(true)  
  ordem         Int        @default(0)
  opcoes        Opcao[]
  questionarios QuePerg[]
  respostas     Resposta[]
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model QuePerg {
  id             Int          @id @default(autoincrement())
  questionarioId Int
  perguntaId     Int
  ordem          Int          @default(0) // Ordem da pergunta dentro do questionário
  // ✅ CORREÇÃO: Deletar esta associação quando o questionário for deletado
  questionario   Questionario @relation(fields: [questionarioId], references: [id], onDelete: Cascade)
  // ✅ CORREÇÃO: Deletar esta associação quando a pergunta for deletada
  pergunta       Pergunta     @relation(fields: [perguntaId], references: [id], onDelete: Cascade)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  @@map("que_perg")
}

model Resposta {
  id         Int      @id @default(autoincrement())
  usuAvalId  Int
  perguntaId Int
  resposta   String
  // ✅ CORREÇÃO: Deletar esta resposta quando a participação for deletada
  usuAval    UsuAval  @relation(fields: [usuAvalId], references: [id], onDelete: Cascade)
  pergunta   Pergunta @relation(fields: [perguntaId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([usuAvalId, perguntaId])
  @@map("resposta")
}
