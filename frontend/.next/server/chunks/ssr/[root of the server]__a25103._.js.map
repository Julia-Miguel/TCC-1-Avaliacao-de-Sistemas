{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/andre/OneDrive/%C3%81rea%20de%20Trabalho/Nova%20pasta/TCC-1-Avaliacao-de-Sistemas/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts\r\nimport axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:4444\",\r\n});\r\n\r\n// --- NOVO: Interceptor para adicionar o token JWT ---\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Verifica se estamos no ambiente do navegador antes de tentar acessar o localStorage\r\n    if (typeof window !== \"undefined\") {\r\n      const token = localStorage.getItem('adminToken');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(new Error(error?.message ?? String(error)));\r\n  }\r\n);\r\n// --------------------------------------------------\r\n\r\nexport default api;"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;;AAEA,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;AACX;AAEA,uDAAuD;AACvD,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAC1B,OAAO;IACL,sFAAsF;IACtF,uCAAmC;;IAKnC;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC,IAAI,MAAM,OAAO,WAAW,OAAO;AAC3D;uCAIa"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/andre/OneDrive/%C3%81rea%20de%20Trabalho/Nova%20pasta/TCC-1-Avaliacao-de-Sistemas/frontend/src/app/questionarios/page.tsx"],"sourcesContent":["// frontend/src/app/questionarios/[id]/page.tsx\r\n'use client';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport api from \"@/services/api\";\r\nimport { useRouter, useParams } from \"next/navigation\";\r\nimport \"../globals.css\";\r\n// Se você criou um AdminAuthGuard, importe-o e envolva o conteúdo principal\r\n// import AdminAuthGuard from '@/components/auth/AdminAuthGuard'; \r\n\r\n// --- Interfaces (sem grandes mudanças, apenas OpcaoInterface pode não precisar de id se for nova) ---\r\ninterface Opcao {\r\n    id?: number; \r\n    texto: string;\r\n}\r\n\r\ninterface PerguntaAninhada {\r\n    id?: number; // ID da pergunta (será undefined para novas perguntas)\r\n    enunciado: string;\r\n    tipos: 'TEXTO' | 'MULTIPLA_ESCOLHA';\r\n    opcoes: Opcao[];\r\n}\r\n\r\ninterface QuePerg {\r\n    // Se for uma nova associação, pode não ter id da relação QuePerg ainda\r\n    // id?: number; \r\n    perguntaId?: number; // Será o ID da pergunta após ela ser salva\r\n    questionarioId: number; // ID do questionário atual\r\n    pergunta: PerguntaAninhada;\r\n}\r\n\r\nexport default function EditQuestionarioForm() {\r\n    const router = useRouter();\r\n    const { id } = useParams();\r\n    const questionarioId = Number(id);\r\n\r\n    const [titulo, setTitulo] = useState(\"\");\r\n    const [quePergs, setQuePergs] = useState<QuePerg[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!questionarioId) {\r\n            setIsLoading(false);\r\n            setError(\"ID do Questionário inválido.\");\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const loadData = async () => {\r\n            try {\r\n                // Busca o título do questionário\r\n                const respQuestionario = await api.get<{ id: number; titulo: string }>(`/questionarios/${questionarioId}`);\r\n                setTitulo(respQuestionario.data.titulo);\r\n\r\n                // Busca as perguntas associadas a ESTE questionário\r\n                const respQuePerg = await api.get<QuePerg[]>(`/quePerg?questionarioId=${questionarioId}`);\r\n                \r\n                const sanitizedQuePergs = respQuePerg.data.map(qp => ({\r\n                    ...qp, // Mantém o ID da relação QuePerg se existir\r\n                    pergunta: {\r\n                        ...qp.pergunta,\r\n                        opcoes: qp.pergunta.opcoes || [] \r\n                    }\r\n                }));\r\n                setQuePergs(sanitizedQuePergs);\r\n\r\n            } catch (err: any) {\r\n                console.error(\"Erro ao carregar dados:\", err);\r\n                if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n                    setError(\"Acesso não autorizado. Faça login como administrador.\");\r\n                    // router.push('/empresas/login'); // O AdminAuthGuard cuidaria disso\r\n                } else if (err.response && err.response.status === 404) {\r\n                    setError(\"Questionário não encontrado ou não pertence à sua empresa.\");\r\n                } else {\r\n                    setError(\"Não foi possível carregar os dados para edição.\");\r\n                }\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        loadData();\r\n    }, [questionarioId, router]);\r\n\r\n    const handlePerguntaChange = (index: number, novoEnunciado: string) => { /* ... seu código ... */ };\r\n    const handleTipoChange = (index: number, novoTipo: 'TEXTO' | 'MULTIPLA_ESCOLHA') => { /* ... seu código ... */ };\r\n    const handleOptionChange = (qIndex: number, oIndex: number, novoTexto: string) => { /* ... seu código ... */ };\r\n    const addOption = (qIndex: number) => { /* ... seu código ... */ };\r\n    const removeOption = (qIndex: number, oIndex: number) => { /* ... seu código ... */ };\r\n\r\n    // --- NOVA FUNÇÃO PARA ADICIONAR PERGUNTA ---\r\n    const handleAddPergunta = () => {\r\n        setQuePergs(prevQuePergs => [\r\n            ...prevQuePergs,\r\n            {\r\n                // Nova pergunta não tem perguntaId do banco ainda\r\n                // O ID da relação QuePerg também não existe\r\n                questionarioId: questionarioId, \r\n                pergunta: {\r\n                    // id: undefined, // ou um ID temporário negativo para a key se precisar\r\n                    enunciado: '',\r\n                    tipos: 'TEXTO', // Padrão para nova pergunta\r\n                    opcoes: []\r\n                }\r\n            }\r\n        ]);\r\n    };\r\n    // -----------------------------------------\r\n\r\n    const handleSaveChanges = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            // 1. Salvar o título do questionário\r\n            await api.put(`/questionarios`, {\r\n                id: questionarioId,\r\n                titulo: titulo\r\n            });\r\n\r\n            // 2. Salvar/Atualizar Perguntas e suas Opções, e associações QuePerg\r\n            for (const qp of quePergs) {\r\n                let perguntaParaSalvar = qp.pergunta;\r\n                let perguntaIdSalva = qp.pergunta.id; // ID da pergunta existente ou undefined se nova\r\n\r\n                if (!perguntaIdSalva) { // É uma nova pergunta\r\n                    // Cria a pergunta\r\n                    const responseNovaPergunta = await api.post('/perguntas', {\r\n                        enunciado: perguntaParaSalvar.enunciado,\r\n                        tipos: perguntaParaSalvar.tipos,\r\n                        // Envia as opções para serem criadas junto com a pergunta\r\n                        opcoes: perguntaParaSalvar.tipos === 'MULTIPLA_ESCOLHA' ? perguntaParaSalvar.opcoes : undefined\r\n                    });\r\n                    perguntaIdSalva = responseNovaPergunta.data.id; // Pega o ID da pergunta recém-criada\r\n\r\n                    // Associa a nova pergunta ao questionário atual\r\n                    await api.post('/queperg', {\r\n                        questionario_id: questionarioId,\r\n                        pergunta_id: perguntaIdSalva\r\n                    });\r\n                } else { // É uma pergunta existente, atualiza\r\n                    await api.put(`/perguntas`, { // A rota PUT /perguntas deve aceitar 'id' no corpo\r\n                        id: perguntaIdSalva,\r\n                        enunciado: perguntaParaSalvar.enunciado,\r\n                        tipos: perguntaParaSalvar.tipos,\r\n                        opcoes: perguntaParaSalvar.opcoes // O controller de update de perguntas já lida com as opções\r\n                    });\r\n                }\r\n            }\r\n\r\n            alert(\"Questionário atualizado com sucesso!\");\r\n            // Opcional: Recarregar os dados para refletir IDs de novas perguntas/opções\r\n            // ou simplesmente voltar.\r\n            router.push(\"/questionarios\");\r\n\r\n        } catch (err: any) {\r\n            console.error('Erro ao salvar:', err.response?.data ?? err.message, err);\r\n            setError(err.response?.data?.message ?? 'Erro ao salvar as alterações!');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    \r\n    if (isLoading) { /* ... seu JSX de loading ... */ }\r\n    if (error) { /* ... seu JSX de erro ... */ }\r\n\r\n    return (\r\n        // <AdminAuthGuard> // Se você já criou o AdminAuthGuard\r\n        <div className=\"page-container\">\r\n            <form onSubmit={handleSaveChanges} className=\"editor-form-card\">\r\n                <div className=\"form-header\">\r\n                    <h3>Editando Questionário</h3>\r\n                    <div className=\"form-header-actions\">\r\n                        <button type=\"button\" onClick={() => router.push(\"/questionarios\")} className=\"btn-secondary\">Cancelar</button>\r\n                        <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\r\n                            {isLoading ? \"Salvando...\" : \"Salvar Alterações\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"display-section\">\r\n                    <label htmlFor=\"titulo-input\">Título</label>\r\n                    <input id=\"titulo-input\" type=\"text\" value={titulo} onChange={(e) => setTitulo(e.target.value)} className=\"input-edit-mode title-input\"/>\r\n                </div>\r\n\r\n                <div className=\"display-section\">\r\n                    <label htmlFor=\"perguntas-list\">Perguntas</label>\r\n                    <div id=\"perguntas-list\" className=\"perguntas-edit-list\">\r\n                        {quePergs.map((qp, qIndex) => (\r\n                            <div\r\n                                // Para novas perguntas, qp.pergunta.id será undefined.\r\n                                // Usamos qIndex para a key de novas perguntas até que tenham ID.\r\n                                key={qp.pergunta.id ?? `nova-pergunta-${qIndex}`} \r\n                                className=\"pergunta-editor-item\"\r\n                            >\r\n                                {/* ... seu JSX para textarea, select de tipo, e opções ... */}\r\n                                {/* (Exatamente como estava antes) */}\r\n                                <textarea\r\n                                    value={qp.pergunta.enunciado}\r\n                                    onChange={(e) => handlePerguntaChange(qIndex, e.target.value)}\r\n                                    className=\"input-edit-mode question-textarea\"\r\n                                    rows={2}\r\n                                    placeholder=\"Digite o enunciado da pergunta\"\r\n                                />\r\n                                <div className=\"pergunta-meta-editor\">\r\n                                    <label htmlFor={`tipo-pergunta-${qIndex}`}>Tipo de Pergunta</label>\r\n                                    <select\r\n                                        id={`tipo-pergunta-${qIndex}`}\r\n                                        value={qp.pergunta.tipos}\r\n                                        onChange={(e) => handleTipoChange(qIndex, e.target.value as any)}\r\n                                        className=\"select-tipo-pergunta\"\r\n                                    >\r\n                                        <option value=\"TEXTO\">Texto</option>\r\n                                        <option value=\"MULTIPLA_ESCOLHA\">Múltipla Escolha</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                {qp.pergunta.tipos === 'MULTIPLA_ESCOLHA' && (\r\n                                    <div className=\"opcoes-editor-container\">\r\n                                        <p className=\"label\">Opções de Resposta</p>\r\n                                        {qp.pergunta.opcoes.map((opt, oIndex) => (\r\n                                            <div key={`q${qIndex}-o${oIndex}`} className=\"opcao-editor-item\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={opt.texto}\r\n                                                    onChange={(e) => handleOptionChange(qIndex, oIndex, e.target.value)}\r\n                                                    placeholder={`Opção ${oIndex + 1}`}\r\n                                                    className=\"input-edit-mode\"\r\n                                                />\r\n                                                <button type=\"button\" onClick={() => removeOption(qIndex, oIndex)} className=\"btn-remover-opcao\">\r\n                                                    &times;\r\n                                                </button>\r\n                                            </div>\r\n                                        ))}\r\n                                        <button type=\"button\" onClick={() => addOption(qIndex)} className=\"btn-adicionar-opcao\">\r\n                                            + Adicionar Opção\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                         {/* --- BOTÃO PARA ADICIONAR NOVA PERGUNTA --- */}\r\n                        <button \r\n                            type=\"button\" \r\n                            onClick={handleAddPergunta} \r\n                            className=\"btn-adicionar-opcao\" // Reutilize ou crie um estilo novo\r\n                            style={{marginTop: '1rem', width: '100%'}} // Exemplo de estilo\r\n                        >\r\n                            + Adicionar Nova Pergunta ao Questionário\r\n                        </button>\r\n                        {/* ----------------------------------------- */}\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        // </AdminAuthGuard> \r\n    );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}