{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/andre/OneDrive/%C3%81rea%20de%20Trabalho/Nova%20pasta/TCC-1-Avaliacao-de-Sistemas/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts\r\nimport axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:4444\",\r\n});\r\n\r\n// --- NOVO: Interceptor para adicionar o token JWT ---\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Verifica se estamos no ambiente do navegador antes de tentar acessar o localStorage\r\n    if (typeof window !== \"undefined\") {\r\n      const token = localStorage.getItem('adminToken');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(new Error(error?.message ?? String(error)));\r\n  }\r\n);\r\n// --------------------------------------------------\r\n\r\nexport default api;"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;;AAEA,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;AACX;AAEA,uDAAuD;AACvD,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAC1B,OAAO;IACL,sFAAsF;IACtF,uCAAmC;;IAKnC;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC,IAAI,MAAM,OAAO,WAAW,OAAO;AAC3D;uCAIa"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/andre/OneDrive/%C3%81rea%20de%20Trabalho/Nova%20pasta/TCC-1-Avaliacao-de-Sistemas/frontend/src/components/auth/AdminAuthGuard.tsx"],"sourcesContent":["// frontend/src/components/auth/AdminAuthGuard.tsx\r\n'use client';\r\nimport { useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/contexts/AuthContext'; // Ajuste o caminho se o AuthContext estiver em outro lugar\r\n\r\nexport default function AdminAuthGuard({ children }: Readonly<{ children: React.ReactNode }>) {\r\n  const { loggedInAdmin, isLoadingAuth } = useAuth();\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    // Não faz nada enquanto o estado de autenticação ainda está carregando do localStorage\r\n    if (isLoadingAuth) {\r\n      return;\r\n    }\r\n\r\n    // Se não estiver logado E o carregamento inicial do auth já terminou, redireciona\r\n    if (!loggedInAdmin && !isLoadingAuth) {\r\n      router.push('/empresas/login'); // Ou para /admin/login se preferir um ponto de entrada único\r\n    }\r\n  }, [loggedInAdmin, isLoadingAuth, router]);\r\n\r\n  // Se ainda estiver carregando o estado de autenticação ou se não estiver logado (e o redirecionamento vai acontecer),\r\n  // pode mostrar um loader ou nada para evitar flash de conteúdo.\r\n  if (isLoadingAuth || !loggedInAdmin) {\r\n    return <div className=\"page-container center-content\"><p>Verificando autorização...</p></div>;\r\n    // Ou return null; para não mostrar nada até o redirecionamento ocorrer.\r\n  }\r\n\r\n  // Se estiver logado, renderiza a página protegida\r\n  return <>{children}</>;\r\n}"],"names":[],"mappings":"AAAA,kDAAkD;;;;;AAElD;AACA;AACA,6NAAkD,2DAA2D;AAH7G;;;;;AAKe,SAAS,eAAe,EAAE,QAAQ,EAA2C;IAC1F,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAC/C,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,uFAAuF;QACvF,IAAI,eAAe;YACjB;QACF;QAEA,kFAAkF;QAClF,IAAI,CAAC,iBAAiB,CAAC,eAAe;YACpC,OAAO,IAAI,CAAC,oBAAoB,6DAA6D;QAC/F;IACF,GAAG;QAAC;QAAe;QAAe;KAAO;IAEzC,sHAAsH;IACtH,gEAAgE;IAChE,IAAI,iBAAiB,CAAC,eAAe;QACnC,qBAAO,8OAAC;YAAI,WAAU;sBAAgC,cAAA,8OAAC;0BAAE;;;;;;;;;;;IACzD,wEAAwE;IAC1E;IAEA,kDAAkD;IAClD,qBAAO;kBAAG;;AACZ"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/andre/OneDrive/%C3%81rea%20de%20Trabalho/Nova%20pasta/TCC-1-Avaliacao-de-Sistemas/frontend/src/app/questionarios/page.tsx"],"sourcesContent":["// frontend/src/app/questionarios/[id]/page.tsx\r\n'use client';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport api from \"@/services/api\";\r\nimport { useRouter, useParams } from \"next/navigation\";\r\nimport \"../globals.css\";\r\nimport AdminAuthGuard from '@/components/auth/AdminAuthGuard'; // Assumindo que você quer proteger esta página\r\n\r\n// --- Interfaces Atualizadas ---\r\ninterface Opcao {\r\n    id?: number; // Opcional para novas opções\r\n    texto: string;\r\n    // Adicionaremos um client-side ID temporário para novas opções\r\n    tempId?: string; \r\n}\r\n\r\ninterface PerguntaAninhada {\r\n    id?: number; // Opcional para novas perguntas\r\n    enunciado: string;\r\n    tipos: 'TEXTO' | 'MULTIPLA_ESCOLHA';\r\n    opcoes: Opcao[];\r\n    // Adicionaremos um client-side ID temporário para novas perguntas\r\n    tempId?: string; \r\n}\r\n\r\ninterface QuePerg {\r\n    // id?: number; // ID da relação QuePerg, pode ser útil se você for editar a relação em si\r\n    perguntaId?: number; // ID da pergunta original (se já existir)\r\n    questionarioId: number; // ID do questionário atual\r\n    pergunta: PerguntaAninhada;\r\n}\r\n\r\n// Interface para o Questionário como vem da API (apenas título)\r\ninterface QuestionarioData {\r\n    id: number;\r\n    titulo: string;\r\n    // Se o backend retornar o criador, adicione aqui\r\n    // criador?: { nome: string; email: string; };\r\n}\r\n\r\nexport default function EditQuestionarioPage() {\r\n    return (\r\n        <AdminAuthGuard>\r\n            <EditQuestionarioForm />\r\n        </AdminAuthGuard>\r\n    )\r\n}\r\n\r\nfunction EditQuestionarioForm() {\r\n    const router = useRouter();\r\n    const { id } = useParams();\r\n    const questionarioId = Number(id);\r\n\r\n    const [titulo, setTitulo] = useState(\"\");\r\n    const [quePergs, setQuePergs] = useState<QuePerg[]>([]); // Agora armazena as associações\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!questionarioId) {\r\n            setIsLoading(false);\r\n            setError(\"ID do questionário não fornecido.\");\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const loadData = async () => {\r\n            try {\r\n                const respQuestionario = await api.get<QuestionarioData>(`/questionarios/${questionarioId}`);\r\n                setTitulo(respQuestionario.data.titulo);\r\n\r\n                const respQuePerg = await api.get<QuePerg[]>(`/quePerg?questionarioId=${questionarioId}`);\r\n                const sanitizedQuePergs = respQuePerg.data.map(qp => ({\r\n                    ...qp,\r\n                    pergunta: {\r\n                        ...qp.pergunta,\r\n                        opcoes: qp.pergunta.opcoes || []\r\n                    }\r\n                }));\r\n                setQuePergs(sanitizedQuePergs);\r\n\r\n            } catch (err: any) {\r\n                console.error(\"Erro ao carregar dados:\", err);\r\n                if (err.response && (err.response.status === 401 || err.response.status === 403)) {\r\n                    setError(\"Acesso não autorizado ou negado.\");\r\n                    // O AdminAuthGuard deve cuidar do redirecionamento\r\n                } else if (err.response && err.response.status === 404) {\r\n                    setError(\"Questionário não encontrado.\");\r\n                }\r\n                else {\r\n                    setError(\"Não foi possível carregar os dados para edição.\");\r\n                }\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        loadData();\r\n    }, [questionarioId]);\r\n\r\n    const handlePerguntaChange = (index: number, novoEnunciado: string) => { /* ... (igual ao anterior) ... */ };\r\n    const handleTipoChange = (index: number, novoTipo: 'TEXTO' | 'MULTIPLA_ESCOLHA') => { /* ... (igual ao anterior) ... */ };\r\n    const handleOptionChange = (qIndex: number, oIndex: number, novoTexto: string) => { /* ... (igual ao anterior) ... */ };\r\n    const addOptionToList = (qIndex: number) => { /* Renomeado de addOption para evitar conflito de nome */\r\n        const newState = [...quePergs];\r\n        // Gerar um tempId para a nova opção para a key do React\r\n        newState[qIndex].pergunta.opcoes.push({ texto: '', tempId: `temp-opt-${Date.now()}` });\r\n        setQuePergs(newState);\r\n    };\r\n    const removeOption = (qIndex: number, oIndex: number) => { /* ... (igual ao anterior) ... */ };\r\n\r\n    // --- NOVA FUNÇÃO PARA ADICIONAR UMA PERGUNTA AO ESTADO ---\r\n    const handleAddNewPergunta = () => {\r\n        const novaPerguntaDefault: PerguntaAninhada = {\r\n            // Não tem 'id' ainda, pois não foi salva no banco\r\n            tempId: `temp-perg-${Date.now()}`, // ID temporário para a key do React\r\n            enunciado: \"\",\r\n            tipos: \"TEXTO\",\r\n            opcoes: []\r\n        };\r\n        const novoQuePerg: QuePerg = {\r\n            questionarioId: questionarioId, // Associa ao questionário atual\r\n            pergunta: novaPerguntaDefault\r\n        };\r\n        setQuePergs(prevQuePergs => [...prevQuePergs, novoQuePerg]);\r\n    };\r\n    // ----------------------------------------------------------\r\n    \r\n    const handleSaveChanges = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            // 1. Salvar o título do questionário\r\n            await api.put(`/questionarios`, {\r\n                id: questionarioId,\r\n                titulo: titulo\r\n            });\r\n\r\n            // 2. Processar cada pergunta (QuePerg)\r\n            for (const qp of quePergs) {\r\n                let perguntaData = { ...qp.pergunta };\r\n                let perguntaSalvaOuAtualizada: PerguntaAninhada;\r\n\r\n                if (perguntaData.id) { // Pergunta existente, ATUALIZAR\r\n                    const updatePayload = {\r\n                        id: perguntaData.id,\r\n                        enunciado: perguntaData.enunciado,\r\n                        tipos: perguntaData.tipos,\r\n                        opcoes: perguntaData.opcoes.map(opt => ({ texto: opt.texto })) // Envia apenas o texto\r\n                    };\r\n                    const response = await api.put(`/perguntas`, updatePayload);\r\n                    perguntaSalvaOuAtualizada = response.data;\r\n                } else { // Nova pergunta, CRIAR\r\n                    const createPayload = {\r\n                        enunciado: perguntaData.enunciado,\r\n                        tipos: perguntaData.tipos,\r\n                        // Envia as opções se for múltipla escolha\r\n                        opcoes: perguntaData.tipos === 'MULTIPLA_ESCOLHA' ? perguntaData.opcoes.map(opt => opt.texto) : [] \r\n                    };\r\n                    const response = await api.post(`/perguntas`, createPayload);\r\n                    perguntaSalvaOuAtualizada = response.data;\r\n\r\n                    // Associar a nova pergunta criada ao questionário atual\r\n                    await api.post('/queperg', {\r\n                        questionario_id: questionarioId,\r\n                        pergunta_id: perguntaSalvaOuAtualizada.id\r\n                    });\r\n                }\r\n            }\r\n\r\n            alert(\"Questionário e perguntas atualizados com sucesso!\");\r\n            // Opcional: Recarregar os dados para refletir IDs de novas perguntas/opções\r\n            // ou simplesmente redirecionar.\r\n            router.push(\"/questionarios\"); \r\n\r\n        } catch (err: any) {\r\n            console.error('Erro ao salvar:', err.response?.data || err.message);\r\n            setError(err.response?.data?.message || 'Erro ao salvar as alterações!');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    \r\n    if (isLoading && !error && quePergs.length === 0 && !titulo) { // Ajuste na condição de loading\r\n        return <div className=\"page-container center-content\"><p>Carregando dados do questionário...</p></div>;\r\n    }\r\n\r\n    if (error && quePergs.length === 0 && !titulo) { // Mostrar erro se não conseguir carregar nada\r\n        return <div className=\"page-container center-content\"><p style={{color: 'red'}}>{error}</p></div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            <form onSubmit={handleSaveChanges} className=\"editor-form-card\">\r\n                <div className=\"form-header\">\r\n                    <h3>Editando Questionário</h3>\r\n                    <div className=\"form-header-actions\">\r\n                        <button type=\"button\" onClick={() => router.push(\"/questionarios\")} className=\"btn-secondary\" disabled={isLoading}>Cancelar</button>\r\n                        <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\r\n                            {isLoading ? \"Salvando...\" : \"Salvar Alterações\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"display-section\">\r\n                    <label htmlFor=\"titulo-input\">Título do Questionário</label>\r\n                    <input \r\n                        id=\"titulo-input\" \r\n                        type=\"text\" \r\n                        value={titulo} \r\n                        onChange={(e) => setTitulo(e.target.value)} \r\n                        className=\"input-edit-mode title-input\"\r\n                        disabled={isLoading}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"display-section\">\r\n                    <label>Perguntas do Questionário</label>\r\n                    <div className=\"perguntas-edit-list\">\r\n                        {quePergs.map((qp, qIndex) => (\r\n                            // Usar tempId para novas perguntas, ou pergunta.id para existentes\r\n                            <div key={qp.pergunta.id || qp.pergunta.tempId} className=\"pergunta-editor-item\">\r\n                                <textarea\r\n                                    value={qp.pergunta.enunciado}\r\n                                    onChange={(e) => handlePerguntaChange(qIndex, e.target.value)}\r\n                                    className=\"input-edit-mode question-textarea\"\r\n                                    rows={2}\r\n                                    placeholder=\"Digite o enunciado da pergunta\"\r\n                                    disabled={isLoading}\r\n                                />\r\n                                <div className=\"pergunta-meta-editor\">\r\n                                    <label>Tipo de Pergunta</label>\r\n                                    <select \r\n                                        value={qp.pergunta.tipos} \r\n                                        onChange={(e) => handleTipoChange(qIndex, e.target.value as 'TEXTO' | 'MULTIPLA_ESCOLHA')} \r\n                                        className=\"select-tipo-pergunta\"\r\n                                        disabled={isLoading}\r\n                                    >\r\n                                        <option value=\"TEXTO\">Texto</option>\r\n                                        <option value=\"MULTIPLA_ESCOLHA\">Múltipla Escolha</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                {qp.pergunta.tipos === 'MULTIPLA_ESCOLHA' && (\r\n                                    <div className=\"opcoes-editor-container\">\r\n                                        <label>Opções de Resposta</label>\r\n                                        {qp.pergunta.opcoes.map((opt, oIndex) => (\r\n                                            <div key={opt.id || opt.tempId || `q${qIndex}-o${oIndex}`} className=\"opcao-editor-item\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    value={opt.texto}\r\n                                                    onChange={(e) => handleOptionChange(qIndex, oIndex, e.target.value)}\r\n                                                    placeholder={`Opção ${oIndex + 1}`}\r\n                                                    className=\"input-edit-mode\"\r\n                                                    disabled={isLoading}\r\n                                                />\r\n                                                <button \r\n                                                    type=\"button\" \r\n                                                    onClick={() => removeOption(qIndex, oIndex)} \r\n                                                    className=\"btn-remover-opcao\"\r\n                                                    disabled={isLoading}\r\n                                                >\r\n                                                    &times;\r\n                                                </button>\r\n                                            </div>\r\n                                        ))}\r\n                                        <button \r\n                                            type=\"button\" \r\n                                            onClick={() => addOptionToList(qIndex)} \r\n                                            className=\"btn-adicionar-opcao\"\r\n                                            disabled={isLoading}\r\n                                        >\r\n                                            + Adicionar Opção\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                        {/* --- BOTÃO PARA ADICIONAR NOVA PERGUNTA --- */}\r\n                        <button \r\n                            type=\"button\" \r\n                            onClick={handleAddNewPergunta} \r\n                            className=\"btn-adicionar-opcao\" // Pode criar um estilo diferente se quiser\r\n                            style={{marginTop: '1rem', backgroundColor: 'var(--primary-color)', color: 'white', border: 'none'}}\r\n                            disabled={isLoading}\r\n                        >\r\n                            + Adicionar Nova Pergunta ao Questionário\r\n                        </button>\r\n                        {/* ----------------------------------------- */}\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 657, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}